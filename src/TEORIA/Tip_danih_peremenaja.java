package TEORIA;

//Типы данных:

//Типы данных занимают:

//byte - 1 байт
//short - 2 байт
//int - 4 байт
//long - 8 байт
//float - 4 байт
//double - 8 байт
//char - 1 байт
//boolean - 1 байт
//Почему так? Для разных ситуаций бывает полезно выделять только нужное количество памяти.

//Но какие последствия? Последствия таковы, что у каждого типа данных свой диапазон значений.

//Диапазоны:

//byte - от -128 до 127
//short - от -32677 до 32676
//int - от 2147483648 до 2147483647
//long - от -9,223,372,036,854,775,808 до 9,223,372,036,854,775,807
//float - от 1.175494351e - 38 до 3.402823466e + 38
//double - от 2.2250738585072014e - 308 до 1.7976931348623158e + 308
//char - от -128 до 127
//boolean - от 0 до 1
//Если выйти за диапазон значений, получится переполнение данных (data overflow)

//Когда это происходит, число приводится к значению, которое помещается в диапазон.

//Пример: тип byte, значение 200
//200 - 127 = 73
//73 - 1 + (-128) = -56
//Примитивные типы данных можно легко преобразовывать из одного в другой (casting)
//Для этого, нужно просто перед значением написать в скобках желаемый тип данных.

//03. Синтаксические части языка
//Все "слова" в языке программирования делятся на группы:

//Идентификаторы - названия всего, что может иметь название.
//Операторы - позволяют выполнять операции над значениями.
//Ключевые слова - такие слова, которые зарезервированы языком под какие-то действия
//Литералы - значения для переменных в коде
//Литералы тоже имеют свой тип данных.

//Примеры:

//45 - тип int
//95L - тип long
//4f, 54.5f - тип float
//87.5 - тип double
//'A' - тип char
//"Hello" - тип String
//Выражение - это последовательность из операторов, идентификаторов и литералов, которая имеет свой тип.

//Тип выражения определяется операндами.
//
//Правило такое: тип данных выражения всегда приводится к самому широкому типу данных операндов.
//
//Вот список типов от самого узкого к самому широкому:

//byte -> short -> int -> long -> float -> double
//Определяется это по диапазону значений.
//Без особых проблем можно делать только расширяющие преобразования.
//В то время как большинство сужающих преобразований в неявном виде запрещены.
// пример сужающего преобразования (будет ошибка)
//        int i = 66;
//        byte b = i;
//Чтобы ошибки устранить, нужно явно указать преобразование типов
//        int i = 66;
//        byte b = (byte)i;
//04. Консольный вывод
//С помощью записи System.out.println() можно выводить что-то в консоль.
//В консоль, в основном, все выводится в типе данных String.
//String - строковый тип данных (хранит строку/текст/набор символов).
//Работать с этим типом в Java довольно удобно. Если вы хотите приписать к строке число, это можно сделать используя операцию "конкатенации"
//Конкатенация - операция объединения двух элементов в один с сохранением последовательности.
//Но объединять можно не только строки со строками, но и другие типы данных со строками.